"""Vulnerability data model for the MCP security scanner."""

from dataclasses import dataclass
from enum import Enum
from typing import Optional, Dict, Any
import json


class VulnerabilitySeverity(Enum):
    """Enumeration of vulnerability severity levels."""
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"


class VulnerabilityType(Enum):
    """Enumeration of vulnerability types."""
    COMMAND_INJECTION = "command_injection"
    SQL_INJECTION = "sql_injection"
    TOOL_POISONING = "tool_poisoning"
    AUTHENTICATION = "authentication"
    CREDENTIALS = "credentials"
    FILE_SECURITY = "file_security"
    INPUT_VALIDATION = "input_validation"
    PROMPT_INJECTION = "prompt_injection"
    CRYPTOGRAPHY = "cryptography"
    NETWORK_SECURITY = "network_security"
    DEPENDENCY_VULNERABILITY = "dependency_vulnerability"
    INSECURE_CONFIGURATION = "insecure_configuration"
    INFORMATION_DISCLOSURE = "information_disclosure"
    FILE_SYSTEM_SECURITY = "file_system_security"  
    ERROR_HANDLING = "error_handling"
    AI_MODEL_SECURITY = "ai_model_security"
    MCP_PROTOCOL = "mcp_protocol"
    STEGANOGRAPHY = "steganography"
    SUPPLY_CHAIN = "supply_chain"
    OTHER = "other"


@dataclass
class Vulnerability:
    """Data model for a security vulnerability."""
    
    id: str
    type: VulnerabilityType
    severity: VulnerabilitySeverity
    file_path: str
    line_number: int
    code_snippet: str
    description: str
    recommendation: str
    confidence: int  # 0-100
    detector: str  # 'static_analyzer' or 'ai_analyzer'
    rule_name: Optional[str] = None
    cwe_id: Optional[str] = None
    additional_info: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        """Validate the vulnerability data after initialization."""
        if not 0 <= self.confidence <= 100:
            raise ValueError("Confidence must be between 0 and 100")
        
        if self.detector not in ['static_analyzer', 'ai_analyzer']:
            raise ValueError("Detector must be 'static_analyzer' or 'ai_analyzer'")
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert vulnerability to dictionary format."""
        return {
            'id': self.id,
            'type': self.type.value,
            'severity': self.severity.value,
            'file_path': self.file_path,
            'line_number': self.line_number,
            'code_snippet': self.code_snippet,
            'description': self.description,
            'recommendation': self.recommendation,
            'confidence': self.confidence,
            'detector': self.detector,
            'rule_name': self.rule_name,
            'cwe_id': self.cwe_id,
            'additional_info': self.additional_info or {}
        }
    
    def to_json(self) -> str:
        """Convert vulnerability to JSON string."""
        return json.dumps(self.to_dict(), indent=2)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Vulnerability':
        """Create vulnerability from dictionary."""
        return cls(
            id=data['id'],
            type=VulnerabilityType(data['type']),
            severity=VulnerabilitySeverity(data['severity']),
            file_path=data['file_path'],
            line_number=data['line_number'],
            code_snippet=data['code_snippet'],
            description=data['description'],
            recommendation=data['recommendation'],
            confidence=data['confidence'],
            detector=data['detector'],
            rule_name=data.get('rule_name'),
            cwe_id=data.get('cwe_id'),
            additional_info=data.get('additional_info')
        )
    
    def get_severity_score(self) -> int:
        """Get numeric score for severity (higher = more severe)."""
        severity_scores = {
            VulnerabilitySeverity.CRITICAL: 4,
            VulnerabilitySeverity.HIGH: 3,
            VulnerabilitySeverity.MEDIUM: 2,
            VulnerabilitySeverity.LOW: 1
        }
        return severity_scores[self.severity]
    
    def get_color_code(self) -> str:
        """Get color code for terminal output."""
        color_codes = {
            VulnerabilitySeverity.CRITICAL: 'red',
            VulnerabilitySeverity.HIGH: 'orange3',
            VulnerabilitySeverity.MEDIUM: 'yellow',
            VulnerabilitySeverity.LOW: 'blue'
        }
        return color_codes[self.severity]
    
    def __str__(self) -> str:
        """String representation of the vulnerability."""
        return (f"[{self.severity.value}] {self.type.value.replace('_', ' ').title()}\n"
                f"File: {self.file_path}:{self.line_number}\n"
                f"Description: {self.description}\n"
                f"Confidence: {self.confidence}%")
    
    def __repr__(self) -> str:
        """Detailed representation of the vulnerability."""
        return (f"Vulnerability(id='{self.id}', type={self.type}, "
                f"severity={self.severity}, file='{self.file_path}', "
                f"line={self.line_number}, confidence={self.confidence})")
