# ======================================================================
# MCP Security Scanner - .gitignore
# ======================================================================

# Python byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
*.pyo
*.pyd

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
coverage.json

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# VS Code
.vscode/

# PyCharm
.idea/

# Temporary files
*.tmp
*.temp
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# ======================================================================
# MCP Security Scanner Specific Files
# ======================================================================

# Scan output files
scan_report.json
scan_report.html
scan_report.md
scan_report.txt
scan_report.xml
scan_results.*
scan_output.*
vulnerability_report.*
security_report.*
*.report
*.scan

# Scanner logs and debug files
*.log
scanner.log
debug.log
scan.log
vulnerability.log
analysis.log
ai_analysis.log
static_analysis.log

# Test and debug files
debug_patterns.py
test_pattern_logic.py
tests/test_files/test_*.py
tests/test_files/debug_*.py
tests/test_files/quick_test.py
tests/test_files/minimal_test.py
tests/test_files/temp_*.py
tests/test_files/sample_*.py

# MCP server test configurations
tests/test_files/*.mcp
tests/test_files/config_*.json
tests/test_files/server_*.py
tests/test_files/vulnerable_*.py

# AI model cache and temporary files
.ai_cache/
ai_analysis_cache/
openai_cache/
model_cache/
*.ai_cache

# Configuration overrides (keep templates)
config/local_*.json
config/dev_*.json
config/test_*.json
*.local.json
*.dev.json

# ======================================================================
# Development and Documentation (Project Specific)
# ======================================================================

# Project documentation (remove when ready for production)
CLEANUP_SUMMARY.md
PROJECT_SUMMARY.md
.github/

# ======================================================================
# Package Management
# ======================================================================

# Package locks and dependency files
package-lock.json
yarn.lock
composer.lock
Pipfile.lock
poetry.lock
pdm.lock
uv.lock

# Requirements backups
requirements*.txt.bak
requirements*.txt.old